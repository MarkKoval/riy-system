"""
sitl_launcher.py ‚Äî –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫—É —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ ArduPilot SITL –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.
"""

import subprocess
import os
import time
from utils.logger import get_logger

logger = get_logger("simulation.sitl_launcher")


class SITLLauncher:
    """
    –ö–ª–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫—ñ–ª—å–∫–æ—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤ ArduPilot SITL (Software-In-The-Loop).
    """

    def __init__(self, sitl_path="~/ardupilot/Tools/autotest/sim_vehicle.py", model="quad", start_port=14550, instances=1):
        self.sitl_path = os.path.expanduser(sitl_path)
        self.model = model
        self.start_port = start_port
        self.instances = instances
        self.processes = []

    def launch_all(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ SITL —É —Ñ–æ–Ω–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å–∞—Ö.
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ {self.instances} SITL –¥—Ä–æ–Ω—ñ–≤ –∑ –º–æ–¥–µ–ª–ª—é '{self.model}'")

        for i in range(self.instances):
            port = self.start_port + i * 2  # –ø–æ—Ä—Ç –¥–ª—è MAVLink: 14550, 14552, ...
            vehicle_name = f"drone{i+1}"
            process = self._launch_single_instance(instance=i, name=vehicle_name, port=port)
            self.processes.append(process)
            time.sleep(1.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É

        logger.info("‚úÖ –£—Å—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ SITL –∑–∞–ø—É—â–µ–Ω–æ")

    def _launch_single_instance(self, instance: int, name: str, port: int):
        """
        –ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω —ñ–Ω—Å—Ç–∞–Ω—Å SITL.
        """
        sitl_cmd = [
            self.sitl_path,
            "-v", "ArduCopter",
            "-f", self.model,
            "--instance", str(instance),
            "--out", f"udp:127.0.0.1:{port}"
        ]

        env = os.environ.copy()
        working_dir = os.path.expanduser(f"/tmp/sitl_{name}")
        os.makedirs(working_dir, exist_ok=True)

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name} [instance={instance}] –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        return subprocess.Popen(
            sitl_cmd,
            cwd=working_dir,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

    def stop_all(self):
        """
        –ó–∞–≤–µ—Ä—à—É—î –≤—Å—ñ SITL-–ø—Ä–æ—Ü–µ—Å–∏.
        """
        logger.info("‚õî –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö SITL —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤")
        for proc in self.processes:
            proc.terminate()
        self.processes = []
