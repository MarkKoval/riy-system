"""
swarm_manager.py ‚Äî –ì–æ–ª–æ–≤–Ω–∏–π –∫–µ—Ä—É—é—á–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó —Ä–æ—é –¥—Ä–æ–Ω—ñ–≤.
"""

import time
from core.drone_agent import DroneAgent
from mavlink.mavlink_interface import MAVLinkInterface
from utils.logger import get_logger

logger = get_logger("core.swarm_manager")


class SwarmManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—é: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–≥–µ–Ω—Ç—ñ–≤, –∫–æ–æ—Ä–¥–∏–Ω—É—î –º—ñ—Å—ñ—ó, —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î –∫–æ–º–∞–Ω–¥–∏.
    """

    def __init__(self, config: dict):
        self.config = config
        self.agents: list[DroneAgent] = []
        self.max_drones = config.get("swarm", {}).get("max_drones", 5)
        self.simulation_mode = config.get("simulation", {}).get("enabled", True)
        self.use_emulator = config.get("simulation", {}).get("use_emulator", True)
        self.start_port = config.get("communication", {}).get("port", 14550)
        self.host = config.get("communication", {}).get("host", "127.0.0.1")

    def launch_swarm(self):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ —Ä–æ—é.
        """
        mode = "–µ–º—É–ª—è—Ü—ñ—ó" if self.use_emulator else "SITL"
        logger.info(f"–ó–∞–ø—É—Å–∫ {self.max_drones} –¥—Ä–æ–Ω—ñ–≤ —É —Ä–µ–∂–∏–º—ñ {mode}")

        for i in range(self.max_drones):
            drone_id = i + 1
            port = self.start_port + i * 2
        
            if self.use_emulator:
                mav = None
            else:
                mav = MAVLinkInterface(udp_port=port)
        
            agent = DroneAgent(
                drone_id=drone_id,
                mavlink=mav,
                config=self.config,
                port=port  # <=== –¥–æ–¥–∞–Ω–æ
            )
            agent.start()
            self.agents.append(agent)
            time.sleep(0.1)

        logger.info("‚úÖ –£—Å—ñ –∞–≥–µ–Ω—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ñ.")

    def broadcast_command(self, command: str):
        """
        –ù–∞–¥—Å–∏–ª–∞—î –∫–æ–º–∞–Ω–¥—É –≤—Å—ñ–º –∞–≥–µ–Ω—Ç–∞–º —É —Ä–æ—î–≤—ñ–π –º–µ—Ä–µ–∂—ñ.
        """
        logger.info(f"üì° –¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏ '{command}' –≤—Å—ñ–º –¥—Ä–æ–Ω–∞–º.")
        for agent in self.agents:
            if agent.communicator:
                agent.communicator.send_message({
                    "type": "command",
                    "command": command
                })

    def broadcast_mission(self, waypoints):
        """
        –ü–µ—Ä–µ–¥–∞—î –º—ñ—Å—ñ—é –≤—Å—ñ–º –¥—Ä–æ–Ω–∞–º.
        """
        logger.info("üì¶ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º—ñ—Å—ñ—ó –≤—Å—ñ–º –∞–≥–µ–Ω—Ç–∞–º.")
        for agent in self.agents:
            if agent.communicator:
                agent.communicator.send_message({
                    "type": "mission",
                    "waypoints": waypoints
                })

    def run_mission_loop(self):
        """
        –ü—Ä–æ—Å—Ç–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ü–∏–∫–ª –º—ñ—Å—ñ—ó.
        """
        try:
            while True:
                time.sleep(10)
                self.broadcast_command("hold")
                time.sleep(5)
                self.broadcast_command("resume")
        except KeyboardInterrupt:
            logger.warning("üõë –û—Ç—Ä–∏–º–∞–Ω–æ Ctrl+C ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Ä–æ—é.")
            self.stop_swarm()

    def get_swarm_state(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω —É—Å—ñ—Ö –¥—Ä–æ–Ω—ñ–≤.
        """
        return {a.drone_id: a.state for a in self.agents}

    def stop_swarm(self):
        """
        –ó—É–ø–∏–Ω—è—î –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ —Ä–æ—é.
        """
        logger.info("‚õî –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ —Ä–æ—é.")
        for agent in self.agents:
            agent.stop()
